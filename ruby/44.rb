#!/usr/bin/env ruby -wKU

require "timing_method"

# Pentagonal numbers are generated by the formula, Pn=n(3n+1)/2. The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70  22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?

class Integer
  def isPentagonal?
    if self < 1
      false
    else
      if (1.0/6)*(1 + Math.sqrt(24*self + 1)) % 1 == 0
        true
      else
        false
      end
    end
  end

  def makePent
    self*(3*self - 1) / 2
  end
end

# Optimizations:
# - Generating pentagonals on the fly.
# - No stored data structures (aka no memory operations).
# - Inner loop only checks up to current max test value.
# - ** Check difference first; far less common.
#   => This has the effect of cutting out the sum check, as well as its math operations.
timing_method do

  i = 1

  found = false
  while found == false
    j = 1
    ip = i.makePent
    while j <= i
      jp = j.makePent
      if (ip - jp).isPentagonal?
        if (ip + jp).isPentagonal?
          p ip - jp
          found = true
          break
        end
      end
      j += 1
    end
    i += 1
  end

end
