#!/usr/bin/env ruby

require 'timing_method'

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
#  10: 1,2,5,10
#  15: 1,3,5,15
#  21: 1,3,7,21
#  28: 1,2,4,7,14,28
#  We can see that 28 is the first triangle number to have over five divisors.
#
#  What is the value of the first triangle number to have over five hundred divisors?

# From StackOverflow:
#
# Hints:
#
# what is the formula for n-th triangular number?
#
# n and n+1 have no common factors (except 1).
#
# Question: given number of factors in n and n+1 how to calculate number of factors in n*(n+1)?
#   What about n/2 and (n+1) (or n and (n+1)/2)?
#
# if you know all prime factors of n how to calculate number of divisors of n?

def sieve(x)
  s = (0..x.to_i).to_a

  s[0] = s[1] = nil

  s.each{ |p| # Perform the block for each entry in the array.
    next unless p # Iterate on next array value if entry is nil
    break if p * p > x # Cease iteration if p*p > max_value
    (p*p).step(x, p) { |m| s[m] = nil } # Starting at p*p, set every p-th value to "nil" until max_value
  }
  s = s.compact
end

# Example:
# 28 = (1 * 28) = (2 * 14) = (4 * 7)
# There are therefore 6 factors.
#
# 28 = 1 * (2^2) * 7
#   => (2^2) * (7^1)
#   => (x^a) * (y^b)
#
# We then add 1 to the value of each exponent, and multiply the resulting values together.
# This gives us the number of factors in the number.
# (a+1)*(b+1)*...(n+1) = Number of factors.
#
# In the previous example, a = 2, b = 1
# (a+1)*(b+1)
#   => (2+1)*(1+1)
#   => 3*2
#   => 6
#
# See:  http://projecteuler.net/project/resources/012_a86c72e34d4ddac1da5871011962ecba/012_overview.pdf

timing_method do

  num_factors_test = 500

  @primes = Array.new
  @num_primes = 100000

  timing_method do
    puts "Calculating #{@num_primes} primes..."
    @primes = sieve(@num_primes)
  end
  puts

  n = 3 # Index for triangle numbers.  Starts at 3, since 1 is not prime, and is not testable.
  numexponents = 0 # Value to test
  tri = 1
  while numexponents <= num_factors_test

    # A triangle number is the sum of all numbers up to a certain limit.
    # This is also n*(n+1)/2

    tri = n*(n+1)/2 # Calculate next triangle number
    tri_test = tri # Copy triangle number to execute test conditions

    # Divisor Algorithm:
    # - Create sieve first of arbitrary size
    # - For each prime number:
    #   => Check if given prime is a factor of tri
    #       if tri%prime[x] == 0
    #           => Repeatedly divide tri by prime
    #           => Add 1 to exp_count
    #           => Cease when tri%prime[x] !=0 OR tri == 0
    #           Put # of occurrences in each prime into an array.
    #       else
    #           => Iterate through prime
    #       end
    #
    # Success condition:
    # - When array.map{|i| i += 1}.reduce(1, :*) == 500

    # puts "Current Triangle number:  #{tri}"
    exp_count = 0

    factors = Array.new # Array of factors
    exponents = Array.new # Array of exponents
    m = 0 # Index for @primes array

    while tri_test > 1
      # puts "tri_test = #{tri_test}"
      if (tri_test%@primes[m]) == 0
        factors.push(@primes[m]) unless factors.include?(@primes[m])
        exp_count += 1 # We don't care about the actual prime numbers, just the exponents
        tri_test = (tri_test / @primes[m])
        if tri_test == 1 # Number is divisible by itself.
          exponents << exp_count
        end
      else
        exp_count > 0 ? exponents << exp_count : nil
        exp_count = 0 # Reset exp_count
        m += 1 # Iterate to next prime
      end
    end

    # factors.zip(exponents){|arr|
    #   puts "Factor:  #{arr[0]}, exponent:  #{arr[1]}"
    # }
    # puts
    numexponents = exponents.map{|i| i += 1}.reduce(1, :*) # Add 1 to each exponent, then multiply them all together
    n += 1
  end

  puts "The first triangle number with more than #{num_factors_test} factors is #{tri}."

end
